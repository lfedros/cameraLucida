
clear; 

%% Set path to relevant code

if ispc
   code_repo = 'C:\Users\Federico\Documents\GitHub\cameraLucida';
else
code_repo = '/Users/federico/Documents/GitHub/cameraLucida';

end
cd(code_repo);
addpath(genpath(code_repo));
set_dendrite_paths(); % edit the paths pointing to the code

%% Populate database - edit build_path.m with location of data
db_V1_spines;
nDb = numel(db);

% count how many dendrites per neuron
for iDb = 1:nDb

%     [db(iDb).morph_seq] = build_path(db(iDb), 'morph_seq');
    [db(iDb).vis_seq] = build_path(db(iDb), 'vis');
    [db(iDb).ret_seq] = build_path(db(iDb), 'ret');
    [db(iDb).spine_seq] = build_path(db(iDb), 'spine_seq');
    [db(iDb).pix_map] = build_path(db(iDb), 'pix_map');

    neuron(iDb).db = db(iDb);

end

%% load all dendrites and register their position to the soma in microns

for iDb = 1:nDb

%    neuron(iDb).dendrite = load_dendrite_old(neuron(iDb));
      [neuron(iDb).dendrite, neuron(iDb).soma, neuron(iDb).stitch] = load_dendrite(neuron(iDb));
 
end


%% pool position and visual properties across dendrites

% for iDb = 1:nDb
% %    [neuron(iDb).spines, neuron(iDb).visual_spines] = pool_spines_old(neuron(iDb),1);
% 
%    [neuron(iDb).spines, neuron(iDb).visual_spines] = pool_spines(neuron(iDb),1);
% end


%% combine pixel maps
for iDb = 1:nDb

     [neuron(iDb).combo_px_map, neuron(iDb).px_map, neuron(iDb).signal_px, neuron(iDb).soma]  = pxmap_combo(neuron(iDb));

     
end
%%
% plotSweepResp_LFR(neuron(iDb).soma.allResp, neuron(iDb).soma.time, 2);
for iDb = 1:nDb
    try
plot_soma_responses(neuron(iDb));
    end
end
%% plot soma vs aggregate spines pref ori and dir

plot_soma_vs_den_ori(neuron, 1,0);

%% compute visual position of spines

for iDb = 1:nDb

   neuron(iDb).ret = load_retino(neuron(iDb),1);
   
end

%% compare distribution of preferred orientation to retinotopic posi1tion

for iDb = 1:nDb

%    [neuron(iDb).visual_spines]  = ...
%        map_spine_retino( neuron(iDb).ret, neuron(iDb).visual_spines);

      [neuron(iDb).combo_px_map]  = ...
       map_px_retino( neuron(iDb).ret, neuron(iDb).combo_px_map, 1);
   iDb
end


%% plot d_ori vs ret_angle joint dist

for iDb = 1:nDb

%   neuron(iDb).visual_spines = plot_joint_ori_ret(neuron(iDb).visual_spines);
     neuron(iDb).combo_px_map = plot_px_joint_ori_ret_dev(neuron(iDb).combo_px_map,1);

end
%% pixel analysis

plot_den_ori_vs_ret_stats(neuron);
%%

for iDb = 1:nDb

     neuron(iDb).combo_px_map = clusta_syn(neuron(iDb).combo_px_map,[0 30 2],1);

end

%%

para_clust = [];
ortho_clust = [];
all_clust = [];

for iDb = 1:nDb

     para_clust(:,iDb) = neuron(iDb).combo_px_map.para_clust;
     ortho_clust(:,iDb) = neuron(iDb).combo_px_map.ortho_clust;
     all_clust(:,iDb) = neuron(iDb).combo_px_map.all_clust;
     para_num(iDb) = neuron(iDb).combo_px_map.para_num;
     ortho_num(iDb) = neuron(iDb).combo_px_map.ortho_num;
     num_ratio(iDb) = para_num(iDb)/ortho_num(iDb);
%      if num_ratio(iDb) <0.1 
%          para_clust(:,iDb) = nan(size(para_clust(:,iDb)));
%      elseif num_ratio(iDb) > 10 
%                   ortho_clust(:,iDb) = nan(size(ortho_clust(:,iDb)));
% 
%      end
     para_clust_norm(:,iDb) = para_clust(:,iDb) ./all_clust(:,iDb) ;
     ortho_clust_norm(:,iDb) = ortho_clust(:,iDb) ./all_clust(:,iDb) ;

end
clust_bins = neuron(iDb).combo_px_map.clust_bins;

bin_groups = repmat(clust_bins', 1, nDb*2);
ori_group = repmat([repmat({'p'}, 1,nDb), repmat({'o'}, 1,nDb)], numel(clust_bins),1);
group{1} = bin_groups(:);
group{2} = ori_group(:);
data = makeVec([para_clust, ortho_clust]);
pc = anovan(data, group);

ave_para_clust = nanmedian(para_clust,2);
ave_ortho_clust = nanmedian(ortho_clust,2);
ave_all_clust = nanmedian(all_clust,2);

mad_para_clust = mad(para_clust,0,2);
mad_ortho_clust = mad(ortho_clust,0,2);
mad_all_clust = mad(all_clust,0,2);

ave_para_clust_norm = nanmedian(para_clust_norm,2);
ave_ortho_clust_norm = nanmedian(ortho_clust_norm,2);

ratio_clust = para_clust./ortho_clust;
ave_ratio_clust = median(ratio_clust,2);

figure;
subplot(1,6,2)
plot(clust_bins, para_clust, 'Color', [1 0 0 ], 'LineWidth', 0.5); hold on
plot(clust_bins, ave_para_clust, 'Color', [1 0 0 ], 'LineWidth', 2); 
ylim([0 0.6])
formatAxes;
subplot(1,6,3)
plot(clust_bins, ortho_clust, 'Color', [0 0.5 1], 'LineWidth', 0.5);hold on
plot(clust_bins, ave_ortho_clust, 'Color', [0 0.5 1], 'LineWidth', 2);
ylim([0 0.6])
formatAxes;
subplot(1,6,1)
plot(clust_bins, all_clust, 'Color', [0 0 0], 'LineWidth', 0.5);hold on
plot(clust_bins, ave_all_clust, 'Color', [0 0 0], 'LineWidth', 2)
ylim([0 0.6])
formatAxes;
subplot(1,6,4)
plot(clust_bins, ave_all_clust, 'Color', [0 0 0], 'LineWidth', 2);hold on
plot(clust_bins, ave_para_clust, 'Color', [1 0 0 ], 'LineWidth', 2); 
plot(clust_bins, ave_ortho_clust, 'Color', [0 0.5 1], 'LineWidth', 2);
% shadePlot(clust_bins, ave_all_clust, mad_all_clust, [0 0 0]);hold on
% shadePlot(clust_bins, ave_para_clust, mad_para_clust,[1 0 0 ]); 
% shadePlot(clust_bins, ave_ortho_clust, mad_ortho_clust, [0 0.5 1]);
ylim([0.25 0.45])
formatAxes;

subplot(1,6,5)
% plot(para_clust(1,:), ortho_clust(1,:), 'o', 'Color', [0 0 0], 'MarkerFaceColor', [.7 .7 .7], 'MarkerSize', 5); hold on
plot([0.2 0.4], [0.2 0.4], '--', 'Color', [.7 .7 .7]); hold on
plot(ave_para_clust(:), ave_ortho_clust(:), 'o', 'Color', [0 0 0], 'MarkerFaceColor', [1 1 1], 'MarkerSize', 8); hold on
ylim([0.25 0.4])
xlim([0.25 0.4])
axis square
formatAxes;

subplot(1,6,6)
plot(clust_bins, ratio_clust, 'Color', [0 0 0], 'LineWidth', 0.5); hold on
plot(clust_bins, ave_ratio_clust, 'Color', [0 0 0], 'LineWidth', 2); 
ylim([0 2])
formatAxes;

%%

figure;

subplot(1,3,1)
plot(clust_bins, ortho_clust, 'Color', [0 0.5 1], 'LineWidth', 0.5);hold on
plot(clust_bins, ave_ortho_clust, 'Color', [0 0.5 1], 'LineWidth', 2);
ylim([0 0.6])
formatAxes;
subplot(1,3,2)
plot(clust_bins, all_clust, 'Color', [0 0 0], 'LineWidth', 0.5);hold on
plot(clust_bins, ave_all_clust, 'Color', [0 0 0], 'LineWidth', 2)
ylim([0 0.6])
formatAxes;
subplot(1,3,3)
plot(clust_bins, ave_all_clust, 'Color', [0 0 0], 'LineWidth', 2);hold on
plot(clust_bins, ave_para_clust, 'Color', [1 0 0 ], 'LineWidth', 2); 
plot(clust_bins, ave_ortho_clust, 'Color', [0 0.5 1], 'LineWidth', 2);

ylim([0.25 0.45])
formatAxes;
%%

para_clust = [];
ortho_clust = [];
all_clust = [];

for iDb = 1:nDb

     para_clust = cat(2, para_clust, neuron(iDb).combo_px_map.oned_para_clust);
     ortho_clust = cat(2, ortho_clust,neuron(iDb).combo_px_map.oned_ortho_clust);
     all_clust = cat(2, all_clust,neuron(iDb).combo_px_map.oned_all_clust);

end
clust_bins = neuron(iDb).combo_px_map.clust_bins;

ave_para_clust = nanmean(para_clust,2);
ave_ortho_clust = nanmean(ortho_clust,2);
ave_all_clust = nanmean(all_clust,2);
ratio_clust = para_clust./ortho_clust;
ave_ratio_clust = nanmean(ratio_clust,2);

figure;
subplot(1,5,2)
plot(clust_bins, para_clust, 'Color', [1 0 0 ], 'LineWidth', 0.5); hold on
plot(clust_bins, ave_para_clust, 'Color', [1 0 0 ], 'LineWidth', 2); 
ylim([0 0.6])
formatAxes
subplot(1,5,3)
plot(clust_bins, ortho_clust, 'Color', [0 0.5 1], 'LineWidth', 0.5);hold on
plot(clust_bins, ave_ortho_clust, 'Color', [0 0.5 1], 'LineWidth', 2);
ylim([0 0.6])
formatAxes
subplot(1,5,1)
plot(clust_bins, all_clust, 'Color', [0 0 0], 'LineWidth', 0.5);hold on
plot(clust_bins, ave_all_clust, 'Color', [0 0 0], 'LineWidth', 2)
ylim([0 0.6])
formatAxes;
subplot(1,5,4)
plot(clust_bins, ave_all_clust, 'Color', [0 0 0], 'LineWidth', 2);hold on
plot(clust_bins, ave_para_clust, 'Color', [1 0 0 ], 'LineWidth', 2); 
plot(clust_bins, ave_ortho_clust, 'Color', [0 0.5 1], 'LineWidth', 2);
ylim([0.25 0.45])
formatAxes;
subplot(1,5,5)
plot(clust_bins, ratio_clust, 'Color', [0 0 0], 'LineWidth', 0.5); hold on
plot(clust_bins, ave_ratio_clust, 'Color', [0 0 0], 'LineWidth', 2); 
ylim([0 2])
formatAxes;




%% ROI analysis

azi_rot = [];
ele_rot = [];
ori_bin = [];
for iDb = 1:nDb
parallel_dist(:, iDb) = neuron(iDb).visual_spines.parallel_dist;
ortho_dist(:, iDb) = neuron(iDb).visual_spines.ortho_dist;
po_ratio(:, iDb) = neuron(iDb).visual_spines.po_ratio;

angs = [0 120 240];

r_para(iDb) = circ_r(angs', parallel_dist(:, iDb));
r_ortho(iDb) = circ_r(angs', ortho_dist(:, iDb));

ret_ori_bins  =  neuron(iDb).visual_spines.ret_ori_bins;

azi_rot = cat(2, azi_rot, neuron(iDb).visual_spines.azi_rot);
ele_rot = cat(2, ele_rot, neuron(iDb).visual_spines.ele_rot);
ori_bin = cat(1, ori_bin, neuron(iDb).visual_spines.all_ori_bin);

end

ave_para_dist = mean(parallel_dist, 2);
ave_ortho_dist = mean(ortho_dist, 2);
ave_po_ratio = mean(po_ratio, 2);

%%
color = [0, 1, 0; 
         1, 1, 0;
         1  0  0]; % colors for ori_bin

figure('Color', 'w', 'Position', [418 456 822 522]);

scatter(azi_rot, ele_rot, 20, color(ori_bin,:), 'filled');
formatAxes
%%

iDb = 3;

figure; 
s = subplot(1,3,1);
imagesc(neuron(iDb).ret.map_x_um, neuron(iDb).ret.map_y_um, neuron(iDb).spines.stitch_den.img); hold on;
plot(0, 0,'*r')
axis image; colormap(s, 1-gray);
formatAxes;

am = subplot(1,3,2);
imagesc(neuron(iDb).ret.map_x_um, neuron(iDb).ret.map_y_um, neuron(iDb).ret.map_azi); axis image; colormap(am, 'jet'); hold on;
scatter(neuron(iDb).visual_spines.x_um, neuron(iDb).visual_spines.y_um, 10,  [0 0 0]);
plot(0, 0,'*k')
title('Azimuth (deg)')
formatAxes;
colorbar;


em = subplot(1,3,3);
imagesc(neuron(iDb).ret.map_x_um, neuron(iDb).ret.map_y_um, neuron(iDb).ret.map_ele); axis image; colormap(em,'jet');hold on;
plot(0,0, '*k')
scatter(neuron(iDb).visual_spines.x_um, neuron(iDb).visual_spines.y_um, 10,  [0 0 0]);
title('Elevation (deg)')
formatAxes;
colorbar;

